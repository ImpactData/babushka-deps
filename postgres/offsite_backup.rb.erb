#!/usr/bin/env ruby

require 'fileutils'

class Object
  def returning obj, &block
    yield obj
    obj
  end
  def tap &block
    returning(self) { yield self }
  end
end

class String
  def / other
    empty? ? other.to_s : File.join(self, other.to_s)
  end
end

class PSQLBackup
  RelativeRepoPath = "~/backups/psqldumps.git"
  LogPath = "~/backups/psqldumps.offsite.log"
  ReservedDBNames = %w[
    template0
    template1
  ]

  attr_reader :path

  def self.run hosts
    reopen_outputs
    new.run(hosts)
  end

  def self.reopen_outputs
    @reopened_outputs ||= [STDOUT, STDERR].each {|fd|
      fd.reopen File.expand_path(LogPath), 'a'
    }
  end

  def initialize
    @path = File.expand_path "~/backups/psqldumps.git"
  end

  def run hosts
    log "\nStarting sqldump run at #{Time.now}."
    git_init(hosts)
    Dir.chdir path do
      dump_dbs and git_commit
      git_push
      git_gc
    end
  end

  def branch
    shell('hostname -f').chomp
  end

  private

  def database_names
    shell('sudo -u postgres psql -l').split("\n").grep(/^ [^ ]/).map {|l|
      l.gsub(/\|.*$/, '').strip
    } - ReservedDBNames
  end

  def git_init hosts
    if File.exists?(path / '.git')
      true
    elsif FileUtils.mkdir_p(path)
      Dir.chdir path do
        init_git_repo
        hosts.all? {|host|
          shell "git remote add #{host} #{host}:#{RelativeRepoPath}"
        }
      end
    end
  end

  def init_git_repo
    shell "git init"
    shell "touch .gitignore"
    shell "git add .gitignore"
    log_shell "Making initial commit", "git commit -m 'Added .gitignore.'"
  end

  def dump_dbs
    database_names.map {|db_name| dump_db db_name }.all?
  end

  def dump_db db_name
    log_shell db_name, "sudo -u postgres pg_dump #{db_name} > #{db_name}.psql"
  end

  def git_commit
    shell "git checkout -b #{branch}"
    shell "git checkout #{branch}"
    shell "git add ."
    returning log_shell("\nCommitting", 'git commit -a -m "via postgres_offsite_backup"') do |result|
      git_gc if result
    end
  end

  def git_gc
    shell "git gc"
  end

  def git_push
    shell('git remote').split("\n").map {|remote|
      log_shell "Pushing to #{remote}", "git push -f #{remote} #{branch}"
    }.all?
  end

  def shell cmd
    result = `#{cmd}`
    result if $? == 0
  end

  def log_shell message, cmd
    print message
    STDOUT.flush
    returning shell(cmd) do |result|
      log result ? '.' : " failed"
    end
  end

  def log message
    puts message
  end

end

PSQLBackup.run %w[<%= var :offsite_host %>]
